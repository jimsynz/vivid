defmodule Vivid.Font do
  alias Vivid.{Font.Char, Group, Hershey, Point, Shape}

  @font_vertical_offset 10

  @moduledoc """
  This module takes characters generated by the Hershey module and converts them
  into groups of shapes using the character's specified left and right padding.

  Specifically this module only knows about the `rowmans` Hershey font, because
  it's all I needed. We need a real font layout system. PR's gratefully accepted.
  """

  @doc ~S"""
  Convert a String containing one or more characters into a shape.

  Can only handle characters defined in the `rowmans` Hershey font. Carriage
  returns and line feeds are also not supported.

  The second argument is a scale factor. Defaults to `1.0`.

  ## Example

      iex> use Vivid
      ...> Font.line("hello world", 0.75)
      ...> |> to_string
      "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" <>
      "@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @\n" <>
      "@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @\n" <>
      "@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @\n" <>
      "@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @\n" <>
      "@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @\n" <>
      "@ @@@    @@@@@@@@@@    @@@@@@@ @@@@@ @@@@@@@@    @@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@ @@@@@@@    @@@@@@@@ @@    @@@ @@@@@@@@    @@ @\n" <>
      "@ @@ @@@@ @@@@@@@  @@@@ @@@@@@ @@@@@ @@@@@@  @@@@  @@@@@@@@@@@@@@@@@ @@@@@ @@@@@ @@@@@  @@@@  @@@@@@ @ @@@@@@@ @@@@@@  @@@@   @\n" <>
      "@   @@@@@@ @@@@@ @@@@@@@ @@@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@ @@@ @ @@@ @@@@@ @@@@@@@@ @@@@@  @@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@ @@@@@@@@ @@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@ @@@ @ @@@ @@@@@ @@@@@@@@ @@@@@  @@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@ @@@@@@@@ @@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@ @@@ @ @@@ @@@@@ @@@@@@@@ @@@@@ @@@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@          @@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@ @@@ @ @@@ @@@@@ @@@@@@@@ @@@@@ @@@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@ @@@@@@@@@@@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@@ @ @@@ @ @@@@@@ @@@@@@@@ @@@@@ @@@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@ @@@@@@@@@@@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@@ @ @@@ @ @@@@@@ @@@@@@@@ @@@@@ @@@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@ @@@@@@@@ @@@@ @@@@@ @@@@@ @@@@@@@@ @@@@@@@@@@@@@@@@@@ @ @@@ @ @@@@@@ @@@@@@@@ @@@@@ @@@@@@@@@ @@@@@ @@@@@@@@ @\n" <>
      "@ @@@@@@@@ @@@@@@ @@@@@@ @@@@@ @@@@@ @@@@@@ @@@@@@ @@@@@@@@@@@@@@@@@@@ @ @@@ @ @@@@@@@ @@@@@@ @@@@@@ @@@@@@@@@ @@@@@@ @@@@@@  @\n" <>
      "@ @@@@@@@@ @@@@@@@ @@@@ @@@@@@ @@@@@ @@@@@@@ @@@@ @@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@ @@@@ @@@@@@@ @@@@@@@@@ @@@@@@@ @@@@ @ @\n" <>
      "@ @@@@@@@@ @@@@@@@@    @@@@@@@ @@@@@ @@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@@    @@@@@@@@ @@@@@@@@@ @@@@@@@@    @@ @\n" <>
      "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
  """
  @spec line(String.t(), number) :: Shape.t()
  def line(str, scale \\ 1.0) do
    font = rowmans()

    str
    |> String.split("")
    |> Stream.reject(fn c -> c == "" end)
    |> Enum.reduce([], fn
      letter, [] ->
        char = Map.get(font, letter)
        lpad = Char.left_pad(char, scale)
        [{char, lpad}]

      letter, [{lchar, lpad} | _] = letters ->
        char = Map.get(font, letter)
        lpad = Char.left_pad(char, scale) + Char.right_pad(lchar, scale) + lpad
        [{char, lpad} | letters]
    end)
    |> Enum.map(fn {char, lpad} ->
      Char.to_shape(char, Point.init(lpad, @font_vertical_offset), scale)
    end)
    |> Enum.into(Group.init())
  end

  @doc """
  Convert the `rowmans` font into a map with the codepoints (characters) as the
  index, and the font character as the value.
  """
  @spec rowmans() :: map
  def rowmans do
    [
      " ",
      "!",
      "\"",
      "#",
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "↑",
      ".",
      "/",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      ":",
      ";",
      "<",
      "=",
      ">",
      "?",
      "@",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "[",
      "\\",
      "]",
      "↑",
      "-",
      "`",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "{",
      "|",
      "}",
      "~"
    ]
    |> Enum.zip(font("rowmans"))
    |> Enum.into(%{})
  end

  defp font(name) do
    name
    |> Hershey.definitions()
    |> Enum.to_list()
  end
end
